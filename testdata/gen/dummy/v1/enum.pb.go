// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.35.2
// 	protoc        (unknown)
// source: dummy/v1/enum.proto

package dummyv1

import (
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

type TestEnumType int32

const (
	TestEnumType_TEST_ENUM_TYPE_UNSPECIFIED TestEnumType = 0
	TestEnumType_TEST_ENUM_TYPE_FOO         TestEnumType = 1
	TestEnumType_TEST_ENUM_TYPE_BAR         TestEnumType = 2
	TestEnumType_TEST_ENUM_TYPE_HELLO_WORLD TestEnumType = 3   // test case: two words
	TestEnumType_TEST_ENUM_TYPE_FOO2        TestEnumType = 4   // test case: enum value with number
	TestEnumType_TEST_ENUM_TYPE_FOO_3       TestEnumType = 5   // test case: enum value with underscore number
	TestEnumType_TEST_ENUM_TYPE_HELLO       TestEnumType = 100 // test case: non-sequential enum value
)

// Enum value maps for TestEnumType.
var (
	TestEnumType_name = map[int32]string{
		0:   "TEST_ENUM_TYPE_UNSPECIFIED",
		1:   "TEST_ENUM_TYPE_FOO",
		2:   "TEST_ENUM_TYPE_BAR",
		3:   "TEST_ENUM_TYPE_HELLO_WORLD",
		4:   "TEST_ENUM_TYPE_FOO2",
		5:   "TEST_ENUM_TYPE_FOO_3",
		100: "TEST_ENUM_TYPE_HELLO",
	}
	TestEnumType_value = map[string]int32{
		"TEST_ENUM_TYPE_UNSPECIFIED": 0,
		"TEST_ENUM_TYPE_FOO":         1,
		"TEST_ENUM_TYPE_BAR":         2,
		"TEST_ENUM_TYPE_HELLO_WORLD": 3,
		"TEST_ENUM_TYPE_FOO2":        4,
		"TEST_ENUM_TYPE_FOO_3":       5,
		"TEST_ENUM_TYPE_HELLO":       100,
	}
)

func (x TestEnumType) Enum() *TestEnumType {
	p := new(TestEnumType)
	*p = x
	return p
}

func (x TestEnumType) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (TestEnumType) Descriptor() protoreflect.EnumDescriptor {
	return file_dummy_v1_enum_proto_enumTypes[0].Descriptor()
}

func (TestEnumType) Type() protoreflect.EnumType {
	return &file_dummy_v1_enum_proto_enumTypes[0]
}

func (x TestEnumType) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use TestEnumType.Descriptor instead.
func (TestEnumType) EnumDescriptor() ([]byte, []int) {
	return file_dummy_v1_enum_proto_rawDescGZIP(), []int{0}
}

// test case: enum type with number at end
type TestEnumType2 int32

const (
	TestEnumType2_TEST_ENUM_TYPE2_UNSPECIFIED TestEnumType2 = 0
	TestEnumType2_TEST_ENUM_TYPE2_FOO         TestEnumType2 = 1
	TestEnumType2_TEST_ENUM_TYPE2_BAR         TestEnumType2 = 2
)

// Enum value maps for TestEnumType2.
var (
	TestEnumType2_name = map[int32]string{
		0: "TEST_ENUM_TYPE2_UNSPECIFIED",
		1: "TEST_ENUM_TYPE2_FOO",
		2: "TEST_ENUM_TYPE2_BAR",
	}
	TestEnumType2_value = map[string]int32{
		"TEST_ENUM_TYPE2_UNSPECIFIED": 0,
		"TEST_ENUM_TYPE2_FOO":         1,
		"TEST_ENUM_TYPE2_BAR":         2,
	}
)

func (x TestEnumType2) Enum() *TestEnumType2 {
	p := new(TestEnumType2)
	*p = x
	return p
}

func (x TestEnumType2) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (TestEnumType2) Descriptor() protoreflect.EnumDescriptor {
	return file_dummy_v1_enum_proto_enumTypes[1].Descriptor()
}

func (TestEnumType2) Type() protoreflect.EnumType {
	return &file_dummy_v1_enum_proto_enumTypes[1]
}

func (x TestEnumType2) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use TestEnumType2.Descriptor instead.
func (TestEnumType2) EnumDescriptor() ([]byte, []int) {
	return file_dummy_v1_enum_proto_rawDescGZIP(), []int{1}
}

// test case: enum type with number at end of word
type TestEnum3Type int32

const (
	TestEnum3Type_TEST_ENUM3_TYPE_UNSPECIFIED TestEnum3Type = 0
	TestEnum3Type_TEST_ENUM3_TYPE_FOO         TestEnum3Type = 1
	TestEnum3Type_TEST_ENUM3_TYPE_BAR         TestEnum3Type = 2
)

// Enum value maps for TestEnum3Type.
var (
	TestEnum3Type_name = map[int32]string{
		0: "TEST_ENUM3_TYPE_UNSPECIFIED",
		1: "TEST_ENUM3_TYPE_FOO",
		2: "TEST_ENUM3_TYPE_BAR",
	}
	TestEnum3Type_value = map[string]int32{
		"TEST_ENUM3_TYPE_UNSPECIFIED": 0,
		"TEST_ENUM3_TYPE_FOO":         1,
		"TEST_ENUM3_TYPE_BAR":         2,
	}
)

func (x TestEnum3Type) Enum() *TestEnum3Type {
	p := new(TestEnum3Type)
	*p = x
	return p
}

func (x TestEnum3Type) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (TestEnum3Type) Descriptor() protoreflect.EnumDescriptor {
	return file_dummy_v1_enum_proto_enumTypes[2].Descriptor()
}

func (TestEnum3Type) Type() protoreflect.EnumType {
	return &file_dummy_v1_enum_proto_enumTypes[2]
}

func (x TestEnum3Type) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use TestEnum3Type.Descriptor instead.
func (TestEnum3Type) EnumDescriptor() ([]byte, []int) {
	return file_dummy_v1_enum_proto_rawDescGZIP(), []int{2}
}

// test case: enum type with number at middle of word
type TestEnum4ThType int32

const (
	TestEnum4ThType_TEST_ENUM4TH_TYPE_UNSPECIFIED TestEnum4ThType = 0
	TestEnum4ThType_TEST_ENUM4TH_TYPE_FOO         TestEnum4ThType = 1
	TestEnum4ThType_TEST_ENUM4TH_TYPE_BAR         TestEnum4ThType = 2
)

// Enum value maps for TestEnum4ThType.
var (
	TestEnum4ThType_name = map[int32]string{
		0: "TEST_ENUM4TH_TYPE_UNSPECIFIED",
		1: "TEST_ENUM4TH_TYPE_FOO",
		2: "TEST_ENUM4TH_TYPE_BAR",
	}
	TestEnum4ThType_value = map[string]int32{
		"TEST_ENUM4TH_TYPE_UNSPECIFIED": 0,
		"TEST_ENUM4TH_TYPE_FOO":         1,
		"TEST_ENUM4TH_TYPE_BAR":         2,
	}
)

func (x TestEnum4ThType) Enum() *TestEnum4ThType {
	p := new(TestEnum4ThType)
	*p = x
	return p
}

func (x TestEnum4ThType) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (TestEnum4ThType) Descriptor() protoreflect.EnumDescriptor {
	return file_dummy_v1_enum_proto_enumTypes[3].Descriptor()
}

func (TestEnum4ThType) Type() protoreflect.EnumType {
	return &file_dummy_v1_enum_proto_enumTypes[3]
}

func (x TestEnum4ThType) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use TestEnum4ThType.Descriptor instead.
func (TestEnum4ThType) EnumDescriptor() ([]byte, []int) {
	return file_dummy_v1_enum_proto_rawDescGZIP(), []int{3}
}

// test case: enum type with multiple numbers
type TestEnum05ThType int32

const (
	TestEnum05ThType_TEST_ENUM05TH_TYPE_UNSPECIFIED TestEnum05ThType = 0
	TestEnum05ThType_TEST_ENUM05TH_TYPE_FOO         TestEnum05ThType = 1
	TestEnum05ThType_TEST_ENUM05TH_TYPE_BAR         TestEnum05ThType = 2
)

// Enum value maps for TestEnum05ThType.
var (
	TestEnum05ThType_name = map[int32]string{
		0: "TEST_ENUM05TH_TYPE_UNSPECIFIED",
		1: "TEST_ENUM05TH_TYPE_FOO",
		2: "TEST_ENUM05TH_TYPE_BAR",
	}
	TestEnum05ThType_value = map[string]int32{
		"TEST_ENUM05TH_TYPE_UNSPECIFIED": 0,
		"TEST_ENUM05TH_TYPE_FOO":         1,
		"TEST_ENUM05TH_TYPE_BAR":         2,
	}
)

func (x TestEnum05ThType) Enum() *TestEnum05ThType {
	p := new(TestEnum05ThType)
	*p = x
	return p
}

func (x TestEnum05ThType) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (TestEnum05ThType) Descriptor() protoreflect.EnumDescriptor {
	return file_dummy_v1_enum_proto_enumTypes[4].Descriptor()
}

func (TestEnum05ThType) Type() protoreflect.EnumType {
	return &file_dummy_v1_enum_proto_enumTypes[4]
}

func (x TestEnum05ThType) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use TestEnum05ThType.Descriptor instead.
func (TestEnum05ThType) EnumDescriptor() ([]byte, []int) {
	return file_dummy_v1_enum_proto_rawDescGZIP(), []int{4}
}

// test case: enum type unordered index
type TestUnorderedEnumType int32

const (
	TestUnorderedEnumType_TEST_UNORDERED_ENUM_TYPE_UNSPECIFIED TestUnorderedEnumType = 0
	TestUnorderedEnumType_TEST_UNORDERED_ENUM_TYPE_BAR         TestUnorderedEnumType = 2
	TestUnorderedEnumType_TEST_UNORDERED_ENUM_TYPE_FOO         TestUnorderedEnumType = 1
)

// Enum value maps for TestUnorderedEnumType.
var (
	TestUnorderedEnumType_name = map[int32]string{
		0: "TEST_UNORDERED_ENUM_TYPE_UNSPECIFIED",
		2: "TEST_UNORDERED_ENUM_TYPE_BAR",
		1: "TEST_UNORDERED_ENUM_TYPE_FOO",
	}
	TestUnorderedEnumType_value = map[string]int32{
		"TEST_UNORDERED_ENUM_TYPE_UNSPECIFIED": 0,
		"TEST_UNORDERED_ENUM_TYPE_BAR":         2,
		"TEST_UNORDERED_ENUM_TYPE_FOO":         1,
	}
)

func (x TestUnorderedEnumType) Enum() *TestUnorderedEnumType {
	p := new(TestUnorderedEnumType)
	*p = x
	return p
}

func (x TestUnorderedEnumType) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (TestUnorderedEnumType) Descriptor() protoreflect.EnumDescriptor {
	return file_dummy_v1_enum_proto_enumTypes[5].Descriptor()
}

func (TestUnorderedEnumType) Type() protoreflect.EnumType {
	return &file_dummy_v1_enum_proto_enumTypes[5]
}

func (x TestUnorderedEnumType) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use TestUnorderedEnumType.Descriptor instead.
func (TestUnorderedEnumType) EnumDescriptor() ([]byte, []int) {
	return file_dummy_v1_enum_proto_rawDescGZIP(), []int{5}
}

var File_dummy_v1_enum_proto protoreflect.FileDescriptor

var file_dummy_v1_enum_proto_rawDesc = []byte{
	0x0a, 0x13, 0x64, 0x75, 0x6d, 0x6d, 0x79, 0x2f, 0x76, 0x31, 0x2f, 0x65, 0x6e, 0x75, 0x6d, 0x2e,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x12, 0x08, 0x64, 0x75, 0x6d, 0x6d, 0x79, 0x2e, 0x76, 0x31, 0x2a,
	0xcb, 0x01, 0x0a, 0x0c, 0x54, 0x65, 0x73, 0x74, 0x45, 0x6e, 0x75, 0x6d, 0x54, 0x79, 0x70, 0x65,
	0x12, 0x1e, 0x0a, 0x1a, 0x54, 0x45, 0x53, 0x54, 0x5f, 0x45, 0x4e, 0x55, 0x4d, 0x5f, 0x54, 0x59,
	0x50, 0x45, 0x5f, 0x55, 0x4e, 0x53, 0x50, 0x45, 0x43, 0x49, 0x46, 0x49, 0x45, 0x44, 0x10, 0x00,
	0x12, 0x16, 0x0a, 0x12, 0x54, 0x45, 0x53, 0x54, 0x5f, 0x45, 0x4e, 0x55, 0x4d, 0x5f, 0x54, 0x59,
	0x50, 0x45, 0x5f, 0x46, 0x4f, 0x4f, 0x10, 0x01, 0x12, 0x16, 0x0a, 0x12, 0x54, 0x45, 0x53, 0x54,
	0x5f, 0x45, 0x4e, 0x55, 0x4d, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x42, 0x41, 0x52, 0x10, 0x02,
	0x12, 0x1e, 0x0a, 0x1a, 0x54, 0x45, 0x53, 0x54, 0x5f, 0x45, 0x4e, 0x55, 0x4d, 0x5f, 0x54, 0x59,
	0x50, 0x45, 0x5f, 0x48, 0x45, 0x4c, 0x4c, 0x4f, 0x5f, 0x57, 0x4f, 0x52, 0x4c, 0x44, 0x10, 0x03,
	0x12, 0x17, 0x0a, 0x13, 0x54, 0x45, 0x53, 0x54, 0x5f, 0x45, 0x4e, 0x55, 0x4d, 0x5f, 0x54, 0x59,
	0x50, 0x45, 0x5f, 0x46, 0x4f, 0x4f, 0x32, 0x10, 0x04, 0x12, 0x18, 0x0a, 0x14, 0x54, 0x45, 0x53,
	0x54, 0x5f, 0x45, 0x4e, 0x55, 0x4d, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x46, 0x4f, 0x4f, 0x5f,
	0x33, 0x10, 0x05, 0x12, 0x18, 0x0a, 0x14, 0x54, 0x45, 0x53, 0x54, 0x5f, 0x45, 0x4e, 0x55, 0x4d,
	0x5f, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x48, 0x45, 0x4c, 0x4c, 0x4f, 0x10, 0x64, 0x2a, 0x62, 0x0a,
	0x0d, 0x54, 0x65, 0x73, 0x74, 0x45, 0x6e, 0x75, 0x6d, 0x54, 0x79, 0x70, 0x65, 0x32, 0x12, 0x1f,
	0x0a, 0x1b, 0x54, 0x45, 0x53, 0x54, 0x5f, 0x45, 0x4e, 0x55, 0x4d, 0x5f, 0x54, 0x59, 0x50, 0x45,
	0x32, 0x5f, 0x55, 0x4e, 0x53, 0x50, 0x45, 0x43, 0x49, 0x46, 0x49, 0x45, 0x44, 0x10, 0x00, 0x12,
	0x17, 0x0a, 0x13, 0x54, 0x45, 0x53, 0x54, 0x5f, 0x45, 0x4e, 0x55, 0x4d, 0x5f, 0x54, 0x59, 0x50,
	0x45, 0x32, 0x5f, 0x46, 0x4f, 0x4f, 0x10, 0x01, 0x12, 0x17, 0x0a, 0x13, 0x54, 0x45, 0x53, 0x54,
	0x5f, 0x45, 0x4e, 0x55, 0x4d, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x32, 0x5f, 0x42, 0x41, 0x52, 0x10,
	0x02, 0x2a, 0x62, 0x0a, 0x0d, 0x54, 0x65, 0x73, 0x74, 0x45, 0x6e, 0x75, 0x6d, 0x33, 0x54, 0x79,
	0x70, 0x65, 0x12, 0x1f, 0x0a, 0x1b, 0x54, 0x45, 0x53, 0x54, 0x5f, 0x45, 0x4e, 0x55, 0x4d, 0x33,
	0x5f, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x55, 0x4e, 0x53, 0x50, 0x45, 0x43, 0x49, 0x46, 0x49, 0x45,
	0x44, 0x10, 0x00, 0x12, 0x17, 0x0a, 0x13, 0x54, 0x45, 0x53, 0x54, 0x5f, 0x45, 0x4e, 0x55, 0x4d,
	0x33, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x46, 0x4f, 0x4f, 0x10, 0x01, 0x12, 0x17, 0x0a, 0x13,
	0x54, 0x45, 0x53, 0x54, 0x5f, 0x45, 0x4e, 0x55, 0x4d, 0x33, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x5f,
	0x42, 0x41, 0x52, 0x10, 0x02, 0x2a, 0x6a, 0x0a, 0x0f, 0x54, 0x65, 0x73, 0x74, 0x45, 0x6e, 0x75,
	0x6d, 0x34, 0x74, 0x68, 0x54, 0x79, 0x70, 0x65, 0x12, 0x21, 0x0a, 0x1d, 0x54, 0x45, 0x53, 0x54,
	0x5f, 0x45, 0x4e, 0x55, 0x4d, 0x34, 0x54, 0x48, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x55, 0x4e,
	0x53, 0x50, 0x45, 0x43, 0x49, 0x46, 0x49, 0x45, 0x44, 0x10, 0x00, 0x12, 0x19, 0x0a, 0x15, 0x54,
	0x45, 0x53, 0x54, 0x5f, 0x45, 0x4e, 0x55, 0x4d, 0x34, 0x54, 0x48, 0x5f, 0x54, 0x59, 0x50, 0x45,
	0x5f, 0x46, 0x4f, 0x4f, 0x10, 0x01, 0x12, 0x19, 0x0a, 0x15, 0x54, 0x45, 0x53, 0x54, 0x5f, 0x45,
	0x4e, 0x55, 0x4d, 0x34, 0x54, 0x48, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x42, 0x41, 0x52, 0x10,
	0x02, 0x2a, 0x6e, 0x0a, 0x10, 0x54, 0x65, 0x73, 0x74, 0x45, 0x6e, 0x75, 0x6d, 0x30, 0x35, 0x74,
	0x68, 0x54, 0x79, 0x70, 0x65, 0x12, 0x22, 0x0a, 0x1e, 0x54, 0x45, 0x53, 0x54, 0x5f, 0x45, 0x4e,
	0x55, 0x4d, 0x30, 0x35, 0x54, 0x48, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x55, 0x4e, 0x53, 0x50,
	0x45, 0x43, 0x49, 0x46, 0x49, 0x45, 0x44, 0x10, 0x00, 0x12, 0x1a, 0x0a, 0x16, 0x54, 0x45, 0x53,
	0x54, 0x5f, 0x45, 0x4e, 0x55, 0x4d, 0x30, 0x35, 0x54, 0x48, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x5f,
	0x46, 0x4f, 0x4f, 0x10, 0x01, 0x12, 0x1a, 0x0a, 0x16, 0x54, 0x45, 0x53, 0x54, 0x5f, 0x45, 0x4e,
	0x55, 0x4d, 0x30, 0x35, 0x54, 0x48, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x42, 0x41, 0x52, 0x10,
	0x02, 0x2a, 0x85, 0x01, 0x0a, 0x15, 0x54, 0x65, 0x73, 0x74, 0x55, 0x6e, 0x6f, 0x72, 0x64, 0x65,
	0x72, 0x65, 0x64, 0x45, 0x6e, 0x75, 0x6d, 0x54, 0x79, 0x70, 0x65, 0x12, 0x28, 0x0a, 0x24, 0x54,
	0x45, 0x53, 0x54, 0x5f, 0x55, 0x4e, 0x4f, 0x52, 0x44, 0x45, 0x52, 0x45, 0x44, 0x5f, 0x45, 0x4e,
	0x55, 0x4d, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x55, 0x4e, 0x53, 0x50, 0x45, 0x43, 0x49, 0x46,
	0x49, 0x45, 0x44, 0x10, 0x00, 0x12, 0x20, 0x0a, 0x1c, 0x54, 0x45, 0x53, 0x54, 0x5f, 0x55, 0x4e,
	0x4f, 0x52, 0x44, 0x45, 0x52, 0x45, 0x44, 0x5f, 0x45, 0x4e, 0x55, 0x4d, 0x5f, 0x54, 0x59, 0x50,
	0x45, 0x5f, 0x42, 0x41, 0x52, 0x10, 0x02, 0x12, 0x20, 0x0a, 0x1c, 0x54, 0x45, 0x53, 0x54, 0x5f,
	0x55, 0x4e, 0x4f, 0x52, 0x44, 0x45, 0x52, 0x45, 0x44, 0x5f, 0x45, 0x4e, 0x55, 0x4d, 0x5f, 0x54,
	0x59, 0x50, 0x45, 0x5f, 0x46, 0x4f, 0x4f, 0x10, 0x01, 0x42, 0x97, 0x01, 0x0a, 0x0c, 0x63, 0x6f,
	0x6d, 0x2e, 0x64, 0x75, 0x6d, 0x6d, 0x79, 0x2e, 0x76, 0x31, 0x42, 0x09, 0x45, 0x6e, 0x75, 0x6d,
	0x50, 0x72, 0x6f, 0x74, 0x6f, 0x50, 0x01, 0x5a, 0x3b, 0x67, 0x69, 0x74, 0x68, 0x75, 0x62, 0x2e,
	0x63, 0x6f, 0x6d, 0x2f, 0x67, 0x6f, 0x63, 0x68, 0x6f, 0x72, 0x65, 0x2f, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x6d, 0x61, 0x67, 0x69, 0x63, 0x2f, 0x74, 0x65, 0x73, 0x74, 0x64, 0x61, 0x74, 0x61, 0x2f,
	0x67, 0x65, 0x6e, 0x2f, 0x64, 0x75, 0x6d, 0x6d, 0x79, 0x2f, 0x76, 0x31, 0x3b, 0x64, 0x75, 0x6d,
	0x6d, 0x79, 0x76, 0x31, 0xa2, 0x02, 0x03, 0x44, 0x58, 0x58, 0xaa, 0x02, 0x08, 0x44, 0x75, 0x6d,
	0x6d, 0x79, 0x2e, 0x56, 0x31, 0xca, 0x02, 0x08, 0x44, 0x75, 0x6d, 0x6d, 0x79, 0x5c, 0x56, 0x31,
	0xe2, 0x02, 0x14, 0x44, 0x75, 0x6d, 0x6d, 0x79, 0x5c, 0x56, 0x31, 0x5c, 0x47, 0x50, 0x42, 0x4d,
	0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0xea, 0x02, 0x09, 0x44, 0x75, 0x6d, 0x6d, 0x79, 0x3a,
	0x3a, 0x56, 0x31, 0x62, 0x06, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x33,
}

var (
	file_dummy_v1_enum_proto_rawDescOnce sync.Once
	file_dummy_v1_enum_proto_rawDescData = file_dummy_v1_enum_proto_rawDesc
)

func file_dummy_v1_enum_proto_rawDescGZIP() []byte {
	file_dummy_v1_enum_proto_rawDescOnce.Do(func() {
		file_dummy_v1_enum_proto_rawDescData = protoimpl.X.CompressGZIP(file_dummy_v1_enum_proto_rawDescData)
	})
	return file_dummy_v1_enum_proto_rawDescData
}

var file_dummy_v1_enum_proto_enumTypes = make([]protoimpl.EnumInfo, 6)
var file_dummy_v1_enum_proto_goTypes = []any{
	(TestEnumType)(0),          // 0: dummy.v1.TestEnumType
	(TestEnumType2)(0),         // 1: dummy.v1.TestEnumType2
	(TestEnum3Type)(0),         // 2: dummy.v1.TestEnum3Type
	(TestEnum4ThType)(0),       // 3: dummy.v1.TestEnum4thType
	(TestEnum05ThType)(0),      // 4: dummy.v1.TestEnum05thType
	(TestUnorderedEnumType)(0), // 5: dummy.v1.TestUnorderedEnumType
}
var file_dummy_v1_enum_proto_depIdxs = []int32{
	0, // [0:0] is the sub-list for method output_type
	0, // [0:0] is the sub-list for method input_type
	0, // [0:0] is the sub-list for extension type_name
	0, // [0:0] is the sub-list for extension extendee
	0, // [0:0] is the sub-list for field type_name
}

func init() { file_dummy_v1_enum_proto_init() }
func file_dummy_v1_enum_proto_init() {
	if File_dummy_v1_enum_proto != nil {
		return
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_dummy_v1_enum_proto_rawDesc,
			NumEnums:      6,
			NumMessages:   0,
			NumExtensions: 0,
			NumServices:   0,
		},
		GoTypes:           file_dummy_v1_enum_proto_goTypes,
		DependencyIndexes: file_dummy_v1_enum_proto_depIdxs,
		EnumInfos:         file_dummy_v1_enum_proto_enumTypes,
	}.Build()
	File_dummy_v1_enum_proto = out.File
	file_dummy_v1_enum_proto_rawDesc = nil
	file_dummy_v1_enum_proto_goTypes = nil
	file_dummy_v1_enum_proto_depIdxs = nil
}
